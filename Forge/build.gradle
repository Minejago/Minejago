buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'parchment', version: parchment_version + '-' + minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly project(":Common")

    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:$rei_version")
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:$cloth_config_version")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:$architectury_version")
    runtimeOnly fg.deobf("maven.modrinth:huge-structure-blocks:${hugestructureblocks_version}")
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:${worldedit_id}")

    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}+${minecraft_version}")
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")
    implementation fg.deobf("curse.maven:dynamiclights-227874:${dynamiclights_id}")
    implementation fg.deobf("curse.maven:moonlight-499980:${moonlight_forge_id}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation fg.deobf("dev._100media.capabilitysyncer:capabilitysyncer:${major_minecraft_version}-${capabilitysyncer_version}")
    implementation fg.deobf("curse.maven:smartbrainlib-661293:${smartbrainlib_forge_id}-sources-${smartbrainlib_sources_forge_id}")
    implementation fg.deobf("maven.modrinth:jade:${jade_forge_version}")

    jarJar(group: "dev._100media.capabilitysyncer", name: "capabilitysyncer", version: "[${capabilitysyncer_version},${next_minecraft_version})")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    Map<String, String> properties = new HashMap<>()
    properties.put("version", version)
    properties.put("minecraft_version", minecraft_version)
    properties.put("next_minecraft_version", next_minecraft_version)
    properties.put("forge_version", forge_version)
    properties.put("major_forge_version", major_forge_version)
    properties.put("playeranimator_version", playeranimator_version)
    properties.put("terrablender_version", terrablender_version)
    properties.put("dynamiclights_version", dynamiclights_version)
    properties.put("moonlight_version", moonlight_version)
    properties.put("geckolib_version", geckolib_version)
    properties.put("smartbrainlib_version", smartbrainlib_version)
    properties.put("capabilitysyncer_version", capabilitysyncer_version)

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}



jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
