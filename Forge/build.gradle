buildscript {
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '6.+'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${mod_id}-neoforge-${minecraft_version}"

minecraft {
    mappings channel: 'parchment', version: parchment_version + '-' + minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg("-Dmixin.debug=true")
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('../Common/src/generated/resources/'), '--existing', file('../Common/src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

reg.configureJarTask(tasks.jarJar)

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation project(':Common')

    // Common
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-neoforge-${minecraft_version}:${sbl_version}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation fg.deobf("maven.modrinth:jade:${jade_version}-forge")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:$rei_version")
    // DO NOT USE - Only for REI
    implementation fg.deobf("dev.architectury:architectury-forge:$architectury_version")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    implementation fg.deobf("com.klikli_dev:modonomicon-${minecraft_version}-forge:${modonomicon_version}")
    implementation fg.deobf("net.tslat.tes:TES-neoforge-${minecraft_version}:${tes_version}")
    implementation fg.deobf("maven.modrinth:moonlight:${moonlight_version}-forge")

    // Forge Only
    implementation fg.deobf("maven.modrinth:sherdsapi:${sherdsapi_version}+Forge")
    implementation fg.deobf("maven.modrinth:trimmed:${trimmed_version}+forge")
    implementation fg.deobf("dev._100media.capabilitysyncer:capabilitysyncer:${capabilitysyncer_version}")

    // Runtime Only Deps
    runtimeOnly fg.deobf("curse.maven:dynamiclights-227874:${dynamiclights_id}")

    // Runtime
    runtimeOnly fg.deobf("maven.modrinth:huge-structure-blocks:${hugestructureblocks_version}")
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:${worldedit_id}")

    jarJar(group: "maven.modrinth", name: "sherdsapi", version: "[${sherdsapi_version},${sherdsapi_next_major_version})")
    jarJar(group: "maven.modrinth", name: "trimmed", version: "[${trimmed_version},${trimmed_next_major_version})")
    jarJar(group: "dev._100media.capabilitysyncer", name: "capabilitysyncer", version: "[${capabilitysyncer_version},${capabilitysyncer_next_major_version})")
}

mixin {
    add sourceSets.main, "minejago.refmap.json"

    config "minejago_forge.mixins.json"
    config "minejago_common.mixins.json"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        fml_version: fml_version,
        mod_id: mod_id,
        version: version,
        mod_name: mod_name,
        mod_author: mod_author,
        forge_version: forge_version,
        minecraft_version: minecraft_version,
        playeranimator_version: playeranimator_version,
        dynamiclights_version: dynamiclights_version,
        moonlight_version: moonlight_version,
        sbl_version: sbl_version,
        geckolib_version: geckolib_version,
        sherdsapi_version: sherdsapi_version,
        trimmed_version: trimmed_version,
        tes_version: tes_version,
        jade_version: jade_version
]
processResources {
    from project(":Common").sourceSets.main.resources

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

jar{
    archiveClassifier = 'slim'
}
jar.finalizedBy('reobfJar')

reobf { jarJar {} }
tasks.jarJar {
    archiveClassifier = ''
}
tasks.jarJar.finalizedBy('reobfJarJar')