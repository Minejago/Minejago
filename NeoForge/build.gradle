plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.120'
    id 'java-library'
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('../common/src/generated/resources/').getAbsolutePath(), '--existing', file('../common/src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jarJar.enable()

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation project(":common")

    // Common
    implementation "mezz.jei:jei-${previous_minecraft_version}-neoforge:${jei_version}"
    implementation "dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}"
    implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-1.20.5:${sbl_version}"
//    implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-${minecraft_version}:${sbl_version}"
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
    compileOnly "maven.modrinth:jade:${jade_version}+neoforge"
//    implementation "maven.modrinth:jade:${jade_version}+neoforge"
    implementation "net.tslat.tes:TES-neoforge-${minecraft_version}:${tes_version}"
    implementation "net.tslat.effectslib:TslatEffectsLib-neoforge-${minecraft_version}:${tslateffectslib_version}"
    implementation "maven.modrinth:midnightlib:${midnightlib_version}-neoforge"

    jarJar implementation("dev.thomasglasser.tommylib:tommylib-neoforge-${minecraft_version}:${tommylib_version}")


    // Forge Only
    jarJar implementation("dev.thomasglasser.sherdsapi:sherdsapi-neoforge-${minecraft_version}:${sherdsapi_version}")
    compileOnly "maven.modrinth:trimmed:${trimmed_version}+forge"
//    jarJar implementation("maven.modrinth:trimmed:${trimmed_version}+forge")
    implementation "maven.modrinth:ryoamiclights:${ryoamiclights_version}-neoforge"

    // Runtime
    // Waiting on neo update
//    runtimeOnly "com.sk89q.worldedit:worldedit-neoforge-mc${minecraft_version}:${worldedit_version}"
//    runtimeOnly "maven.modrinth:obsidianui:${obsidianui_version}-neoforge"
//    runtimeOnly "dev.architectury:architectury-neoforge:$architectury_version"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

tasks.named('jarJar') {
    archiveClassifier = ''
}