plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    id 'java-library'
}
base {
    archivesName = "${mod_id}-neoforge-${minecraft_version}"
}

subsystems {
    parchment {
        // The Minecraft version for which the Parchment mappings were created.
        // This does not necessarily need to match the Minecraft version your mod targets
        // Defaults to the value of Gradle property neogradle.subsystems.parchment.minecraftVersion
        minecraftVersion = "1.20.3"
//        minecraftVersion = minecraft_version

        // The version of Parchment mappings to apply.
        // See https://parchmentmc.org/docs/getting-started for a list.
        // Defaults to the value of Gradle property neogradle.subsystems.parchment.mappingsVersion
        mappingsVersion = parchment_version
    }
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('../Common/src/generated/resources/').getAbsolutePath(), '--existing', file('../Common/src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jarJar.enable()

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation project(":Common")

    // Common
    implementation "dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}"
    implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-${minecraft_version}:${sbl_version}"
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
    implementation "maven.modrinth:jade:13.2.2-neoforge"
//    implementation "maven.modrinth:jade:${jade_version}-neoforge"
    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"
    implementation "dev.architectury:architectury-neoforge:$architectury_version" // DO NOT USE - Only for REI
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    implementation "com.klikli_dev:modonomicon-${minecraft_version}-neoforge:${modonomicon_version}"
    implementation "net.tslat.tes:TES-neoforge-${minecraft_version}:${tes_version}"
    implementation "maven.modrinth:moonlight:forge_${moonlight_version}"
    implementation "net.tslat.effectslib:TslatEffectsLib-neoforge-${minecraft_version}:${tslateffectslib_version}"
    implementation "maven.modrinth:midnightlib:${midnightlib_version}-neoforge"

    // Forge Only
    implementation "maven.modrinth:sherdsapi:${sherdsapi_version}-neoforge"
    compileOnly "maven.modrinth:trimmed:${trimmed_version}+forge"
//    implementation "maven.modrinth:trimmed:${trimmed_version}+forge"
    implementation "maven.modrinth:ryoamiclights:${ryoamiclights_version}-neoforge"

    // Runtime
//    runtimeOnly "maven.modrinth:worldedit:${worldedit_version}"
    runtimeOnly "maven.modrinth:worldedit:${worldedit_id}"
    runtimeOnly "maven.modrinth:obsidianui:${obsidianui_version}-neoforge"

    // TODO: Fix
//    jarJar(group: "maven.modrinth", name: "sherdsapi", version: "[${sherdsapi_version},${sherdsapi_next_major_version})")
//    jarJar(group: "maven.modrinth", name: "trimmed", version: "[${trimmed_version},${trimmed_next_major_version})")
}

tasks.withType(ProcessResources).configureEach {
    from project(":Common").sourceSets.main.resources
    var replaceProperties = [
            mod_name                   : mod_name,
            resource_pack_format_number: resource_pack_format_number,
            data_pack_format_number    : data_pack_format_number,
            major_fml_version          : major_fml_version,
            mod_id                     : mod_id,
            version                    : project.version,
            mod_author                 : mod_author,
            license                    : license,
            neoforge_version           : neoforge_version,
            minecraft_version          : minecraft_version,
            next_minecraft_version     : next_minecraft_version,
            playeranimator_version: playeranimator_version,
            ryoamiclights_version: ryoamiclights_version,
            moonlight_version: moonlight_version,
            sbl_version: sbl_version,
            geckolib_version: geckolib_version,
            sherdsapi_version: sherdsapi_version,
            trimmed_version: trimmed_version,
            tes_version: tes_version,
            jade_version: jade_version

    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml','pack.mcmeta', 'resourcepacks/minejago_immersion_pack/pack.mcmeta', 'resourcepacks/minejago_potion_pot_pack/pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}