buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
    }
}

plugins {
    id 'com.matyrobbrt.mc.registrationutils' version "${previous_minecraft_version}-${registration_utils_version}"
//    id 'com.matyrobbrt.mc.registrationutils' version "${minecraft_version}-${registration_utils_version}" Waiting on 1.19.4
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

registrationUtils {
    group 'dev.thomasglasser.minejago.registration'
    projects {
        Fabric { type 'fabric' } // The fabric project
        Forge { type 'forge' } // The forge project
        Common { type 'common' } // The common project
    }
}

forgix {
    group = "dev.thomasglasser.minejago" // This is the common group of the mod which by default in Architectury Template it's defined as "maven_group" in your gradle.properties. If this property is not defined then by default it'll fetch the group from the maven_group property in your gradle.properties
    mergedJarName = "${mod_name}-merged-${minecraft_version}-${version}.jar" // This is the name of the merged jar. If this property is not defined then by default it'll fetch the "archives_base_name" property with the "mod_version" property in your gradle.properties.
    outputDir = "build/libs" // This is the output directory of the merged jar from the root project. If this property is not defined then by default it's set to "Merged".
}

subprojects {
    
    apply plugin: 'java'
    
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {

        mavenCentral()
        mavenLocal()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name "KosmX's maven"
            url 'https://maven.kosmx.dev/'
        }
        maven {
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
        }
        maven {
            url "https://cursemaven.com"
        }
        maven {
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
        }
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven {
            name = '100Media'
            url = 'https://maven.100media.dev/'
        }
        maven {
            name 'Gegy'
            url 'https://maven.gegy.dev'
        }
        maven {
            url "https://maven.architectury.dev/"
        }
        maven {
            url "https://maven.terraformersmc.com/releases/"
        }
        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
        }
        maven {
            name = "SmartBrainLib (SBL) Maven Repo"
            url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
        }
        maven {
            name = "TES Maven Repo"
            url = "https://dl.cloudsmith.io/public/tslat/tes/maven/"
        }
        repositories {
            maven { url = 'https://maven.parchmentmc.org' }
        }
        maven {
            url = "https://maven.dhyces.dev/"
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/dhyces/trimmed")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
    
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }
}
