plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_id}-fabric-${minecraft_version}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        parchment("org.parchmentmc.data:parchment-1.20.3:${parchment_version}@zip")
    }

    // Required for the rei forge annotation
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-forge:$rei_version"

    implementation project(":Common")
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    // Common
    include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${playeranimator_version}")
    include modCompileOnly("com.jamieswhiteshirt:reach-entity-attributes:$reachentityattributes_version")
//    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:$reachentityattributes_version")
//    include modImplementation("maven.modrinth:trimmed:${trimmed_version}+fabric")
    include modCompileOnly("maven.modrinth:trimmed:${trimmed_version}+fabric")
    include modImplementation("maven.modrinth:midnightlib:${midnightlib_version}-fabric")
    include modImplementation("dev.thomasglasser.tommylib:tommylib-fabric-${minecraft_version}:${tommylib_version}")

    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${minecraft_version}:${sbl_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"
    modImplementation "maven.modrinth:jade:${jade_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modImplementation "com.klikli_dev:modonomicon-${minecraft_version}-fabric:${modonomicon_version}"
    modImplementation "net.tslat.tes:TES-fabric-${minecraft_version}:${tes_version}"
    modImplementation "maven.modrinth:moonlight:fabric_${moonlight_version}"
    modImplementation "maven.modrinth:ryoamiclights:${ryoamiclights_version}-fabric"
    modImplementation "net.tslat.effectslib:TslatEffectsLib-fabric-${minecraft_version}:${tslateffectslib_version}"

    // Fabric Only
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Runtime Only Deps
    modRuntimeOnly "maven.modrinth:sherdsapi:${sherdsapi_version}-fabric"
    modRuntimeOnly "dev.architectury:architectury-fabric:$architectury_version"

//    modRuntimeOnly "maven.modrinth:worldedit:${worldedit_version}"
    modRuntimeOnly "maven.modrinth:worldedit:${worldedit_id}"
    modRuntimeOnly "com.terraformersmc:modmenu:${modmenu_version}"
    modRuntimeOnly "maven.modrinth:obsidianui:${obsidianui_version}-fabric"
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

    mixin {
        add sourceSets.main, "${mod_id}.refmap.json"
    }

    accessWidenerPath = project(":Common").file("src/main/resources/${mod_id}.accesswidener")
}

tasks.withType(ProcessResources).configureEach {
    from project(":Common").sourceSets.main.resources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}